datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  userType      String          @default("user")
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
model Product {
  id         Int          @id @default(autoincrement())
  name       String
  images     String
  price     	Int
  CategoryId Int
  category   Category     @relation(fields: [CategoryId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  properties ProductProperties[]
}

model Category {
  id        Int          @id @default(autoincrement())
  name      String
  createdAt DateTime     @default(now())
  products  Product[]    
}

model ProductProperties {
  id        Int          @id @default(autoincrement())
  productId Int
  propertyId Int
  value     String       
  createdAt DateTime     @default(now())
  product   Product      @relation(fields: [productId], references: [id])
  property  Property     @relation(fields: [propertyId], references: [id])
}

model PropertyGroup {
  id        Int          @id @default(autoincrement())
  name      String
  createdAt DateTime     @default(now())
  properties Property[]
}

model Property {
  id              Int          @id @default(autoincrement())
  name            String
  grade           Int          @default(1)
  propertyGroupId Int          
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  propertyGroup   PropertyGroup @relation(fields: [propertyGroupId], references: [id])
  productProperties ProductProperties[]
}